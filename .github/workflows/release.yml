name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.1.0)'
        required: true
        type: string
      release_notes:
        description: 'Additional release notes (optional)'
        required: false
        type: string

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: 11
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
          
    - name: Configure Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        
    - name: Update version in POM
      run: |
        mvn versions:set -DnewVersion=${{ inputs.version }} -DgenerateBackupPoms=false
        git add pom.xml
        git commit -m "chore: bump version to ${{ inputs.version }}"
      working-directory: src/sonar-hooks
      
    - name: Run tests
      run: mvn clean test -B
      working-directory: src/sonar-hooks
      
    - name: Build plugin
      run: |
        mvn clean package -B -DskipTests
        mvn assembly:single -DdescriptorId=webapp
      working-directory: src/sonar-hooks
      
    - name: Create release tag
      run: |
        git tag -a "v${{ inputs.version }}" -m "Release version ${{ inputs.version }}"
        git push origin "v${{ inputs.version }}"
        
    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        if [ -z "$PREVIOUS_TAG" ]; then
          # If no previous tag, get all commits
          CHANGELOG=$(git log --pretty=format:"* %s" --no-merges)
        else
          # Get commits since the previous tag
          CHANGELOG=$(git log ${PREVIOUS_TAG}..HEAD --pretty=format:"* %s" --no-merges)
        fi
        
        # Save changelog to file
        echo "# What's Changed" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        if [ -n "$CHANGELOG" ]; then
          echo "$CHANGELOG" >> CHANGELOG.md
        else
          echo "No changes since last release." >> CHANGELOG.md
        fi
        
        # Add additional notes if provided
        if [ -n "${{ inputs.release_notes }}" ]; then
          echo "" >> CHANGELOG.md
          echo "## Additional Notes" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "${{ inputs.release_notes }}" >> CHANGELOG.md
        fi
        
        # Add installation instructions
        echo "" >> CHANGELOG.md
        echo "## Installation" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "1. Download the plugin JAR file from the assets below" >> CHANGELOG.md
        echo "2. Copy it to the \`extensions/plugins/\` directory of your SonarQube instance" >> CHANGELOG.md
        echo "3. Restart SonarQube" >> CHANGELOG.md
        echo "4. Configure the webhook settings in SonarQube admin panel" >> CHANGELOG.md
        
        # Output for GitHub release
        cat CHANGELOG.md
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: "v${{ inputs.version }}"
        name: "${{ inputs.version }}"
        body_path: CHANGELOG.md
        files: |
          src/sonar-hooks/target/sonar-hooks-plugin-${{ inputs.version }}.jar
          src/sonar-hooks/target/sonar-hooks-plugin-${{ inputs.version }}-webapp.zip
        draft: false
        prerelease: false
        generate_release_notes: false
        
    - name: Update development version
      run: |
        # Calculate next development version
        IFS='.' read -ra VERSION_PARTS <<< "${{ inputs.version }}"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]}
        
        # Increment minor version for next development
        NEXT_MINOR=$((MINOR + 1))
        NEXT_DEV_VERSION="${MAJOR}.${NEXT_MINOR}.0-SNAPSHOT"
        
        mvn versions:set -DnewVersion=$NEXT_DEV_VERSION -DgenerateBackupPoms=false
        git add pom.xml
        git commit -m "chore: prepare for next development iteration $NEXT_DEV_VERSION"
        git push origin main
      working-directory: src/sonar-hooks 